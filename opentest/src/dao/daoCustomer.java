package dao;

import model.Customer;
import connect.ConnectDB;
import itf.itfCustomer;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;

public class daoCustomer implements itfCustomer {
    private final ConnectDB db = new ConnectDB();

    @Override
    public List<Customer> getAllCustomers() {
        List<Customer> customers = new ArrayList<>();
        String query = "SELECT * FROM customers";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Customer customer = new Customer(
                    rs.getString("customer_id"),
                    rs.getString("customer_fname"),
                    rs.getString("customer_lname"),
                    rs.getString("customer_email"),
                    rs.getString("customer_password"),
                    rs.getString("customer_street"),
                    rs.getString("customer_city"),
                    rs.getString("customer_state"),
                    rs.getString("customer_zipcode")
                );
                customers.add(customer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return customers;
    }

    @Override
    public Customer getCustomerById(int customer_id) {
        Customer customer = null;
        String query = "SELECT * FROM customers WHERE customer_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, customer_id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    customer = new Customer(
                        rs.getString("customer_id"),
                        rs.getString("customer_fname"),
                        rs.getString("customer_lname"),
                        rs.getString("customer_email"),
                        rs.getString("customer_password"),
                        rs.getString("customer_street"),
                        rs.getString("customer_city"),
                        rs.getString("customer_state"),
                        rs.getString("customer_zipcode")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return customer;
    }

    @Override
    public boolean insertCustomer(Customer customer) {
        String query = "INSERT INTO customers (customer_id, customer_fname, customer_lname, customer_email, customer_password, customer_street, customer_city, customer_state, customer_zipcode) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, customer.getCustomer_id());
            stmt.setString(2, customer.getCustomer_fname());
            stmt.setString(3, customer.getCustomer_lname());
            stmt.setString(4, customer.getCustomer_email());
            stmt.setString(5, customer.getCustomer_password());
            stmt.setString(6, customer.getCustomer_street());
            stmt.setString(7, customer.getCustomer_city());
            stmt.setString(8, customer.getCustomer_state());
            stmt.setString(9, customer.getCustomer_zipcode());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean updateCustomer(Customer customer) {
        String query = "UPDATE customers SET customer_fname = ?, customer_lname = ?, customer_email = ?, customer_password = ?, customer_street = ?, customer_city = ?, customer_state = ?, customer_zipcode = ? WHERE customer_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, customer.getCustomer_fname());
            stmt.setString(2, customer.getCustomer_lname());
            stmt.setString(3, customer.getCustomer_email());
            stmt.setString(4, customer.getCustomer_password());
            stmt.setString(5, customer.getCustomer_street());
            stmt.setString(6, customer.getCustomer_city());
            stmt.setString(7, customer.getCustomer_state());
            stmt.setString(8, customer.getCustomer_zipcode());
            stmt.setString(9, customer.getCustomer_id());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean deleteCustomer(int customer_id) {
        String query = "DELETE FROM customers WHERE customer_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, customer_id);
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }
}