// src/dao/daoOrder_Item.java
package dao;

import connect.ConnectDB;
import itf.itfOrder_Item;
import model.Order_Item;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class daoOrder_Item implements itfOrder_Item {
    private final ConnectDB db = new ConnectDB();

    @Override
    public List<Order_Item> getAllOrder_Items() {
        List<Order_Item> orderItems = new ArrayList<>();
        String query = "SELECT * FROM order_items";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                orderItems.add(mapRow(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return orderItems;
    }

    @Override
    public Order_Item getOrder_ItemById(int order_item_id) {
        Order_Item item = null;
        String query = "SELECT * FROM order_items WHERE order_item_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order_item_id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    item = mapRow(rs);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return item;
    }

    @Override
    public boolean insertOrder_Item(Order_Item order_item) {
        String query = "INSERT INTO order_items (order_item_id, order_item_order_id, order_item_product_id, order_item_quantity, order_item_subtotal, order_item_product_price) VALUES (?, ?, ?, ?, ?, ?)";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order_item.getOrder_item_id());
            stmt.setInt(2, order_item.getOrder_id());
            stmt.setInt(3, order_item.getProduct_id());
            stmt.setInt(4, order_item.getQuantity());
            stmt.setDouble(5, order_item.getSubtotal());
            stmt.setDouble(6, order_item.getProduct_price());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean updateOrder_Item(Order_Item order_item) {
        String query = "UPDATE order_items SET order_item_order_id = ?, order_item_product_id = ?, order_item_quantity = ?, order_item_subtotal = ?, order_item_product_price = ? WHERE order_item_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order_item.getOrder_id());
            stmt.setInt(2, order_item.getProduct_id());
            stmt.setInt(3, order_item.getQuantity());
            stmt.setDouble(4, order_item.getSubtotal());
            stmt.setDouble(5, order_item.getProduct_price());
            stmt.setInt(6, order_item.getOrder_item_id());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean deleteOrder_Item(int order_item_id) {
        String query = "DELETE FROM order_items WHERE order_item_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order_item_id);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    private Order_Item mapRow(ResultSet rs) throws SQLException {
        return new Order_Item(
            rs.getInt("order_item_id"),
            rs.getInt("order_item_order_id"),
            rs.getInt("order_item_product_id"),
            rs.getInt("order_item_quantity"),
            rs.getDouble("order_item_subtotal"),
            rs.getDouble("order_item_product_price")
        );
    }
}