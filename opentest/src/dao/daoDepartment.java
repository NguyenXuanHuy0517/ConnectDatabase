package dao;

import model.Department;
import connect.ConnectDB;
import itf.itfDepartment;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;

public class daoDepartment implements  itfDepartment {
    private final ConnectDB db = new ConnectDB();

    public List<Department> getAllDepartments() {
        List<Department> departments = new ArrayList<>();
        String query = "SELECT * FROM departments";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Department department = new Department(
                    rs.getString("department_id"),
                    rs.getString("department_name")
                );
                departments.add(department);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return departments;
    }

    public Department getDepartmentById(int department_id) {
        Department department = null;
        String query = "SELECT * FROM departments WHERE department_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, department_id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    department = new Department(
                        rs.getString("department_id"),
                        rs.getString("department_name")
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return department;
    }

    public boolean insertDepartment(Department department) {
        String query = "INSERT INTO departments (department_id, department_name, department_description) VALUES (?, ?, ?)";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, department.getDepartment_id());
            stmt.setString(2, department.getDepartment_name());
            stmt.setString(3, department.getDepartment_description());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    public boolean updateDepartment(Department department) {
        String query = "UPDATE departments SET department_name = ?, department_description = ? WHERE department_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, department.getDepartment_name());
            stmt.setString(2, department.getDepartment_description());
            stmt.setString(3, department.getDepartment_id());
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    public boolean deleteDepartment(int department_id) {
        String query = "DELETE FROM departments WHERE department_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, department_id);
            int rowsAffected = stmt.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }
}