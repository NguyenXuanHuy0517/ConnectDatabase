// src/dao/daoProduct.java
package dao;

import connect.ConnectDB;
import itf.itfProduct;
import model.Product;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class daoProduct implements itfProduct {
    private final ConnectDB db = new ConnectDB();

    @Override
    public List getAllProducts() {
        List<Product> products = new ArrayList<>();
        String query = "SELECT * FROM products";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                products.add(mapRow(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return products;
    }

    @Override
    public Product getProductById(int product_id) {
        Product product = null;
        String query = "SELECT * FROM products WHERE product_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, product_id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    product = mapRow(rs);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return product;
    }

    @Override
    public boolean insertProduct(Product product) {
        String query = "INSERT INTO products (product_id, product_category_id, product_name, product_description, product_price, product_image) VALUES (?, ?, ?, ?, ?, ?)";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, product.getProduct_id());
            stmt.setInt(2, product.getProduct_category_id());
            stmt.setString(3, product.getProduct_name());
            stmt.setString(4, product.getProduct_description());
            stmt.setDouble(5, product.getProduct_price());
            stmt.setString(6, product.getProduct_image());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean updateProduct(Product product) {
        String query = "UPDATE products SET product_category_id = ?, product_name = ?, product_description = ?, product_price = ?, product_image = ? WHERE product_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, product.getProduct_category_id());
            stmt.setString(2, product.getProduct_name());
            stmt.setString(3, product.getProduct_description());
            stmt.setDouble(4, product.getProduct_price());
            stmt.setString(5, product.getProduct_image());
            stmt.setInt(6, product.getProduct_id());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean deleteProduct(int product_id) {
        String query = "DELETE FROM products WHERE product_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, product_id);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    private Product mapRow(ResultSet rs) throws SQLException {
        return new Product(
            rs.getInt("product_id"),
            rs.getInt("product_category_id"),
            rs.getString("product_name"),
            rs.getString("product_description"),
            rs.getDouble("product_price"),
            rs.getString("product_image")
        );
    }
}