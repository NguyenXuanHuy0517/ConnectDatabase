package dao;

import connect.ConnectDB;
import itf.itfOrder;
import model.Order;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class daoOrder implements itfOrder {
    private final ConnectDB db = new ConnectDB();

    @Override
    public List getAllOrders() {
        List<Order> orders = new ArrayList<>();
        String query = "SELECT * FROM orders";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                orders.add(mapRow(rs));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return orders;
    }

    @Override
    public Order getOrderById(int order_id) {
        Order order = null;
        String query = "SELECT * FROM orders WHERE order_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order_id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    order = mapRow(rs);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return order;
    }

    @Override
    public boolean insertOrder(Order order) {
        String query = "INSERT INTO orders (order_id, order_date, order_customer_id, order_status) VALUES (?, ?, ?, ?)";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order.getOrder_id());
            if (order.getOrder_date() != null) {
                stmt.setDate(2, new java.sql.Date(order.getOrder_date().getTime()));
            } else {
                stmt.setNull(2, Types.DATE);
            }
            stmt.setInt(3, order.getOrder_customer_id());
            stmt.setString(4, order.getOrder_status());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean updateOrder(Order order) {
        String query = "UPDATE orders SET order_date = ?, order_customer_id = ?, order_status = ? WHERE order_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            if (order.getOrder_date() != null) {
                stmt.setDate(1, new java.sql.Date(order.getOrder_date().getTime()));
            } else {
                stmt.setNull(1, Types.DATE);
            }
            stmt.setInt(2, order.getOrder_customer_id());
            stmt.setString(3, order.getOrder_status());
            stmt.setInt(4, order.getOrder_id());
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    @Override
    public boolean deleteOrder(int order_id) {
        String query = "DELETE FROM orders WHERE order_id = ?";
        Connection conn = db.getConnection();
        try (PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setInt(1, order_id);
            return stmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            db.closeConnection(conn);
        }
        return false;
    }

    private Order mapRow(ResultSet rs) throws SQLException {
        return new Order(
            rs.getInt("order_id"),
            rs.getDate("order_date"),
            rs.getInt("order_customer_id"),
            rs.getString("order_status")
        );
    }
}