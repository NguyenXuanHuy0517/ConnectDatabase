
package menu;

import controller.Order_ItemController;
import model.Order_Item;

import java.util.List;
import java.util.Scanner;

public class Order_ItemMenu {
    public static void orderItemMenu(Scanner scanner) {
        Order_ItemController controller = new Order_ItemController();

        while (true) {
            System.out.println("\n=== Order Item menu ===");
            System.out.println("1. Add Order Item");
            System.out.println("2. Update Order Item");
            System.out.println("3. Delete Order Item");
            System.out.println("4. View Order Items");
            System.out.println("5. View Order Item by ID");
            System.out.println("0. Back");

            int choice = MenuUtils.readIntRequired(scanner, "Choose an option: ");

            try {
                if (choice == 1) {
                    Order_Item oi = buildOrderItemFormInput(scanner, true);
                    boolean ok = controller.insertOrderItem(oi);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    Order_Item oi = buildOrderItemFormInput(scanner, true);
                    boolean ok = controller.updateOrderItem(oi);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    int id = MenuUtils.readIntRequired(scanner, "Order Item ID to delete: ");
                    boolean ok = controller.deleteOrderItem(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Order_Item> list = controller.getAllOrderItems();
                    printHeader();
                    if (list != null) {
                        for (Order_Item item : list) printRow(item);
                    }
                    printFooter();
                } else if (choice == 5) {
                    int id = MenuUtils.readIntRequired(scanner, "Order Item ID to view: ");
                    Order_Item oi = controller.getOrderItemById(id);
                    printHeader();
                    if (oi != null) printRow(oi);
                    else System.out.println("| \tNot found\t\t\t\t\t\t|");
                    printFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Order_Item buildOrderItemFormInput(Scanner scanner, boolean promptId) {
        int id = 0;
        if (promptId) {
            System.out.print("Order Item ID (leave blank for 0): ");
            String s = scanner.nextLine().trim();
            if (!s.isEmpty()) id = Integer.parseInt(s);
        }

        int orderId = MenuUtils.readIntRequired(scanner, "Order ID: ");
        int productId = MenuUtils.readIntRequired(scanner, "Product ID: ");
        int quantity = MenuUtils.readIntRequired(scanner, "Quantity: ");

        System.out.print("Subtotal: ");
        double subtotal = Double.parseDouble(scanner.nextLine().trim());

        System.out.print("Product Price: ");
        double productPrice = Double.parseDouble(scanner.nextLine().trim());

        return new Order_Item(id, orderId, productId, quantity, subtotal, productPrice);
    }

    /* lowercase alias kept for compatibility */
    private static Order_Item buildOrderItemformInput(Scanner scanner, boolean promptId) {
        return buildOrderItemFormInput(scanner, promptId);
    }

    private static void printHeader() {
        System.out.println("+---------------+----------+-----------+----------+------------+--------------+");
        System.out.println("| OrderItem ID  | Order ID | ProductID | Quantity | Subtotal   | ProductPrice |");
        System.out.println("+---------------+----------+-----------+----------+------------+--------------+");
    }

    private static void printFooter() {
        System.out.println("+---------------+----------+-----------+----------+------------+--------------+");
    }

    private static void printRow(Order_Item oi) {
        String id = MenuUtils.safeGetValue(oi, "getOrder_item_id", "getOrderItemId", "getOrder_itemId", "getId", "order_item_id", "id");
        String orderId = MenuUtils.safeGetValue(oi, "getOrder_id", "getOrderId", "order_id", "orderId");
        String productId = MenuUtils.safeGetValue(oi, "getProduct_id", "getProductId", "product_id", "productId");
        String quantity = MenuUtils.safeGetValue(oi, "getQuantity", "quantity");
        String subtotal = MenuUtils.safeGetValue(oi, "getSubtotal", "subtotal");
        String price = MenuUtils.safeGetValue(oi, "getProduct_price", "getProductPrice", "product_price", "productPrice", "price");

        if (id == null) id = "";
        if (orderId == null) orderId = "";
        if (productId == null) productId = "";
        if (quantity == null) quantity = "";
        if (subtotal == null) subtotal = "";
        if (price == null) price = "";

        System.out.format("| %-13s | %-8s | %-9s | %-8s | %-10s | %-12s |%n",
                MenuUtils.truncate(id, 13),
                MenuUtils.truncate(orderId, 8),
                MenuUtils.truncate(productId, 9),
                MenuUtils.truncate(quantity, 8),
                MenuUtils.truncate(subtotal, 10),
                MenuUtils.truncate(price, 12));
    }
}