package menu;

import controller.Order_ItemController;
import model.Order_Item;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Scanner;

public class Order_ItemMenu {
    public static void orderItemMenu(Scanner scanner) {
        Order_ItemController controller = new Order_ItemController();

        while (true) {
            System.out.println("\n=== Order Item menu ===");
            System.out.println("1. Add Order Item");
            System.out.println("2. Update Order Item");
            System.out.println("3. Delete Order Item");
            System.out.println("4. View Order Items");
            System.out.println("5. View Order Item by ID");
            System.out.println("0. Back");
            System.out.print("Choose an option: ");

            String line = scanner.nextLine().trim();
            int choice;
            try {
                choice = Integer.parseInt(line);
            } catch (Exception e) {
                System.out.println("Invalid input.");
                continue;
            }

            try {
                if (choice == 1) {
                    Order_Item item = buildOrderItemFromInput(scanner, true);
                    if (item != null && controller.insertOrderItem(item)) {
                        System.out.println("Added successfully.");
                    } else {
                        System.out.println("Add failed.");
                    }
                } else if (choice == 2) {
                    System.out.print("Order Item ID to update: ");
                    int id = Integer.parseInt(scanner.nextLine().trim());
                    Order_Item item = buildOrderItemFromInput(scanner, false);
                    if (item != null) {
                        trySet(item, "setOrderItemId", id);
                        trySet(item, "setId", id);
                        if (controller.updateOrderItem(item)) System.out.println("Updated successfully.");
                        else System.out.println("Update failed.");
                    } else {
                        System.out.println("Cannot create Order_Item object.");
                    }
                } else if (choice == 3) {
                    System.out.print("Order Item ID to delete: ");
                    int id = Integer.parseInt(scanner.nextLine().trim());
                    boolean ok = controller.deleteOrderItem(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Order_Item> list = controller.getAllOrderItems();
                    printHeader();
                    if (list != null) {
                        for (Order_Item oi : list) printRow(oi);
                    }
                    printFooter();
                } else if (choice == 5) {
                    System.out.print("Order Item ID to view: ");
                    int id = Integer.parseInt(scanner.nextLine().trim());
                    Order_Item oi = controller.getOrderItemById(id);
                    printHeader();
                    if (oi != null) printRow(oi);
                    else System.out.println("| \tNot found\t\t\t\t\t|");
                    printFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (NumberFormatException nfe) {
                System.out.println("Invalid number format.");
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Order_Item buildOrderItemFromInput(Scanner scanner, boolean allowBlankId) {
        try {
            Integer id = null;
            if (allowBlankId) {
                System.out.print("Order Item ID (leave blank if none): ");
                String s = scanner.nextLine().trim();
                if (!s.isEmpty()) id = Integer.parseInt(s);
            }
            System.out.print("Order ID: ");
            Integer orderId = Integer.parseInt(scanner.nextLine().trim());
            System.out.print("Product ID: ");
            Integer productId = Integer.parseInt(scanner.nextLine().trim());
            System.out.print("Quantity: ");
            Integer quantity = Integer.parseInt(scanner.nextLine().trim());
            System.out.print("Subtotal: ");
            Double subtotal = Double.parseDouble(scanner.nextLine().trim());
            System.out.print("Product Price: ");
            Double productPrice = Double.parseDouble(scanner.nextLine().trim());

            Order_Item inst;
            try {
                inst = Order_Item.class.getDeclaredConstructor().newInstance();
            } catch (Exception ex) {
                inst = tryConstructWithAny(Order_Item.class, id, orderId, productId, quantity, subtotal, productPrice);
                if (inst == null) return null;
            }

            if (id != null) {
                trySet(inst, "setOrderItemId", id);
                trySet(inst, "setId", id);
            }
            trySet(inst, "setOrderId", orderId);
            trySet(inst, "setProductId", productId);
            trySet(inst, "setQuantity", quantity);
            trySet(inst, "setSubtotal", subtotal);
            trySet(inst, "setProductPrice", productPrice);
            trySet(inst, "setPrice", productPrice);

            return inst;
        } catch (Exception e) {
            return null;
        }
    }

    private static <T> T tryConstructWithAny(Class<T> cls, Object... values) {
        try {
            for (var ctor : cls.getDeclaredConstructors()) {
                Class<?>[] pts = ctor.getParameterTypes();
                if (pts.length == 0) continue;
                Object[] args = new Object[pts.length];
                boolean ok = true;
                for (int i = 0; i < pts.length; i++) {
                    Class<?> p = pts[i];
                    Object pick = i < values.length ? values[i] : null;
                    if (pick == null) {
                        ok = false;
                        break;
                    }
                    if (p == int.class || p == Integer.class) {
                        if (pick instanceof Number) args[i] = ((Number) pick).intValue();
                        else try { args[i] = Integer.parseInt(String.valueOf(pick)); } catch (Exception ex) { ok = false; break; }
                    } else if (p == double.class || p == Double.class) {
                        if (pick instanceof Number) args[i] = ((Number) pick).doubleValue();
                        else try { args[i] = Double.parseDouble(String.valueOf(pick)); } catch (Exception ex) { ok = false; break; }
                    } else if (p == String.class) {
                        args[i] = String.valueOf(pick);
                    } else {
                        ok = false;
                        break;
                    }
                }
                if (!ok) continue;
                ctor.setAccessible(true);
                return (T) ctor.newInstance(args);
            }
        } catch (Exception ignored) { }
        return null;
    }

    private static void trySet(Object obj, String setterName, Object value) {
        if (obj == null || value == null) return;
        Class<?> cls = obj.getClass();
        try {
            Method m = cls.getMethod(setterName, value.getClass());
            m.invoke(obj, value);
            return;
        } catch (Exception ignored) { }
        try {
            if (value instanceof Integer) {
                Method m = cls.getMethod(setterName, int.class);
                m.invoke(obj, ((Integer) value).intValue());
                return;
            } else if (value instanceof Double) {
                Method m = cls.getMethod(setterName, double.class);
                m.invoke(obj, ((Double) value).doubleValue());
                return;
            } else {
                Method m = cls.getMethod(setterName, String.class);
                m.invoke(obj, String.valueOf(value));
                return;
            }
        } catch (Exception ignored) { }
        for (Method m : cls.getMethods()) {
            if (!m.getName().equalsIgnoreCase(setterName)) continue;
            Class<?>[] ps = m.getParameterTypes();
            if (ps.length != 1) continue;
            try {
                if (ps[0] == String.class) m.invoke(obj, String.valueOf(value));
                else if (ps[0] == int.class || ps[0] == Integer.class) m.invoke(obj, Integer.parseInt(String.valueOf(value)));
                else if (ps[0] == double.class || ps[0] == Double.class) m.invoke(obj, Double.parseDouble(String.valueOf(value)));
                else m.invoke(obj, value);
                return;
            } catch (Exception ignored) { }
        }
        String fieldName = setterName;
        if (fieldName.startsWith("set")) {
            fieldName = Character.toLowerCase(fieldName.charAt(3)) + fieldName.substring(4);
        }
        try {
            Field f = cls.getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(obj, value);
        } catch (Exception ignored) { }
    }

    private static void printHeader() {
        System.out.println("+---------------+----------+-----------+----------+------------+--------------+");
        System.out.println("| OrderItem ID  | Order ID | ProductID | Quantity | Subtotal   | ProductPrice |");
        System.out.println("+---------------+----------+-----------+----------+------------+--------------+");
    }

    private static void printFooter() {
        System.out.println("+---------------+----------+-----------+----------+------------+--------------+");
    }

    private static void printRow(Order_Item oi) {
        String id = safeGet(oi, "getOrderItemId", "getId", "orderItemId", "id");
        String orderId = safeGet(oi, "getOrderId", "orderId", "getOrder_id");
        String productId = safeGet(oi, "getProductId", "productId", "getProduct_id");
        String quantity = safeGet(oi, "getQuantity", "quantity");
        String subtotal = safeGet(oi, "getSubtotal", "subtotal");
        String price = safeGet(oi, "getProductPrice", "getPrice", "productPrice", "price");

        System.out.format("| %-13s | %-8s | %-9s | %-8s | %-10s | %-12s |%n",
                emptyTo(id), emptyTo(orderId), emptyTo(productId), emptyTo(quantity), emptyTo(subtotal), emptyTo(price));
    }

    private static String emptyTo(String s) {
        return s == null ? "" : s;
    }

    private static String safeGet(Object obj, String... candidates) {
        if (obj == null) return "";
        Class<?> cls = obj.getClass();
        for (String name : candidates) {
            try {
                if (name.startsWith("get")) {
                    Method m = cls.getMethod(name);
                    Object v = m.invoke(obj);
                    if (v != null) return String.valueOf(v);
                }
            } catch (Exception ignored) { }
        }
        for (String name : candidates) {
            try {
                Method m = cls.getMethod(name);
                Object v = m.invoke(obj);
                if (v != null) return String.valueOf(v);
            } catch (Exception ignored) { }
        }
        for (String name : candidates) {
            String fieldName = name;
            if (fieldName.startsWith("get")) {
                fieldName = Character.toLowerCase(fieldName.charAt(3)) + fieldName.substring(4);
            }
            try {
                Field f = cls.getDeclaredField(fieldName);
                f.setAccessible(true);
                Object v = f.get(obj);
                if (v != null) return String.valueOf(v);
            } catch (Exception ignored) { }
        }
        return "";
    }
}