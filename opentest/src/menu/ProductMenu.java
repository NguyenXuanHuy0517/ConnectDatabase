package menu;

import controller.ProductController;
import model.Product;

import java.util.List;
import java.util.Scanner;

public class ProductMenu {
    public static void productMenu(Scanner scanner) {
        ProductController controller = new ProductController();

        while (true) {
            System.out.println("\n=== Product menu ===");
            System.out.println("1. Add Product");
            System.out.println("2. Update Product");
            System.out.println("3. Delete Product");
            System.out.println("4. View Products");
            System.out.println("5. View Product by ID");
            System.out.println("0. Back");

            int choice = MenuUtils.readIntRequired(scanner, "Choose an option: ");

            try {
                if (choice == 1) {
                    Product p = buildProductFormInput(scanner, true);
                    boolean ok = controller.insertProduct(p);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    Product p = buildProductFormInput(scanner, true);
                    boolean ok = controller.updateProduct(p);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    int id = MenuUtils.readIntRequired(scanner, "Product ID to delete: ");
                    boolean ok = controller.deleteProduct(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Product> list = controller.getAllProducts();
                    printProductTableHeader();
                    if (list != null) for (Product p : list) printProductRow(p);
                    printProductTableFooter();
                } else if (choice == 5) {
                    int id = MenuUtils.readIntRequired(scanner, "Product ID to view: ");
                    Product p = controller.getProductById(id);
                    printProductTableHeader();
                    if (p != null) printProductRow(p);
                    else System.out.println("| \tNot found\t\t\t\t\t\t\t|");
                    printProductTableFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Product buildProductFormInput(Scanner scanner, boolean promptId) {
        int id = 0;
        if (promptId) {
            System.out.print("Product ID (leave blank for 0): ");
            String s = scanner.nextLine().trim();
            if (!s.isEmpty()) id = Integer.parseInt(s);
        }

        System.out.print("Product Category ID: ");
        int categoryId = Integer.parseInt(scanner.nextLine().trim());

        System.out.print("Product Name: ");
        String name = scanner.nextLine().trim();

        System.out.print("Product Description: ");
        String desc = scanner.nextLine().trim();

        System.out.print("Product Price: ");
        double price = Double.parseDouble(scanner.nextLine().trim());

        System.out.print("Product Image: ");
        String image = scanner.nextLine().trim();

        return new Product(id, categoryId, name, desc, price, image);
    }

    /* lowercase alias kept for compatibility */
    private static Product buildProductformInput(Scanner scanner, boolean promptId) {
        return buildProductFormInput(scanner, promptId);
    }

    private static void printProductTableHeader() {
        System.out.println("+------------+---------------------+----------------------+------------------------------+------------+----------------------+");
        System.out.println("| Product ID | Product Category ID | Product Name         | Product Description          | Price      | Product Image        |");
        System.out.println("+------------+---------------------+----------------------+------------------------------+------------+----------------------+");
    }

    private static void printProductTableFooter() {
        System.out.println("+------------+---------------------+----------------------+------------------------------+------------+----------------------+");
    }

    private static void printProductRow(Product p) {
        String id = MenuUtils.safeGetValue(p, "getProduct_id", "getProductId", "getId", "product_id", "id");
        String categoryId = MenuUtils.safeGetValue(p, "getProduct_category_id", "getCategoryId", "getProductCategoryId", "product_category_id", "categoryId");
        String name = MenuUtils.safeGetValue(p, "getProduct_name", "getName", "product_name", "name");
        String desc = MenuUtils.safeGetValue(p, "getProduct_description", "getDescription", "product_description", "description");
        String price = MenuUtils.safeGetValue(p, "getProduct_price", "getPrice", "product_price", "price");
        String image = MenuUtils.safeGetValue(p, "getProduct_image", "getImage", "product_image", "image");

        if (id == null) id = "";
        if (categoryId == null) categoryId = "";
        if (name == null) name = "";
        if (desc == null) desc = "";
        if (price == null) price = "";
        if (image == null) image = "";

        System.out.format("| %-10s | %-19s | %-20s | %-28s | %-10s | %-20s |%n",
                MenuUtils.truncate(id, 10),
                MenuUtils.truncate(categoryId, 19),
                MenuUtils.truncate(name, 20),
                MenuUtils.truncate(desc, 28),
                MenuUtils.truncate(price, 10),
                MenuUtils.truncate(image, 20));
    }
}