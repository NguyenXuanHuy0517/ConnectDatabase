package menu;

import controller.OrderController;
import model.Order;

import java.sql.Date;
import java.util.List;
import java.util.Scanner;

public class OrderMenu {
    public static void orderMenu(Scanner scanner) {
        OrderController controller = new OrderController();

        while (true) {
            System.out.println("\n=== Order menu ===");
            System.out.println("1. Add Order");
            System.out.println("2. Update Order");
            System.out.println("3. Delete Order");
            System.out.println("4. View Orders");
            System.out.println("5. View Order by ID");
            System.out.println("0. Back");

            int choice = MenuUtils.readIntRequired(scanner, "Choose an option: ");

            try {
                if (choice == 1) {
                    Order o = buildOrderFormInput(scanner, true);
                    boolean ok = controller.insertOrder(o);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    Order o = buildOrderFormInput(scanner, true);
                    boolean ok = controller.updateOrder(o);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    int id = MenuUtils.readIntRequired(scanner, "Order ID to delete: ");
                    boolean ok = controller.deleteOrder(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Order> list = controller.getAllOrders();
                    printHeader();
                    if (list != null) {
                        for (Order o : list) printRow(o);
                    }
                    printFooter();
                } else if (choice == 5) {
                    int id = MenuUtils.readIntRequired(scanner, "Order ID to view: ");
                    Order o = controller.getOrderById(id);
                    printHeader();
                    if (o != null) printRow(o);
                    else System.out.println("| \tNot found\t\t\t\t|");
                    printFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Order buildOrderFormInput(Scanner scanner, boolean promptId) {
        int id = 0;
        if (promptId) {
            System.out.print("Order ID: ");
            String idStr = scanner.nextLine().trim();
            if (!idStr.isEmpty()) id = Integer.parseInt(idStr);
        }

        System.out.print("Order Date (yyyy-mm-dd): ");
        String dateStr = scanner.nextLine().trim();
        Date date;
        if (dateStr.isEmpty()) {
            date = new Date(System.currentTimeMillis());
        } else {
            date = Date.valueOf(dateStr);
        }

        int customerId = MenuUtils.readIntRequired(scanner, "Order Customer ID: ");

        System.out.print("Order Status: ");
        String status = scanner.nextLine().trim();

        return new Order(id, date, customerId, status);
    }

    /* lowercase alias kept for compatibility */
    private static Order buildOrderformInput(Scanner scanner, boolean promptId) {
        return buildOrderFormInput(scanner, promptId);
    }

    private static void printHeader() {
        System.out.println("+------------+-----------------+-------------------+-------------------+");
        System.out.println("| Order ID   | Order Date      | Order Customer ID | Order Status      |");
        System.out.println("+------------+-----------------+-------------------+-------------------+");
    }

    private static void printFooter() {
        System.out.println("+------------+-----------------+-------------------+-------------------+");
    }

    private static void printRow(Order o) {
        String id = MenuUtils.safeGetValue(o, "getOrder_id", "getOrderId", "getId", "order_id", "id");
        String date = MenuUtils.safeGetValue(o, "getOrder_date", "getOrderDate", "getDate", "order_date", "date");
        String cust = MenuUtils.safeGetValue(o, "getOrder_customer_id", "getOrderCustomerId", "getCustomerId", "orderCustomerId", "order_customer_id", "customerId");
        String status = MenuUtils.safeGetValue(o, "getOrder_status", "getOrderStatus", "getStatus", "order_status", "status");

        if (id == null) id = "";
        if (date == null) date = "";
        if (cust == null) cust = "";
        if (status == null) status = "";

        System.out.format("| %-10s | %-15s | %-17s | %-17s |%n",
                MenuUtils.truncate(id, 10),
                MenuUtils.truncate(date, 15),
                MenuUtils.truncate(cust, 17),
                MenuUtils.truncate(status, 17));
    }
}