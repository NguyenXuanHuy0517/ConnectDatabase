// java
package menu;

import controller.CustomerController;
import model.Customer;

import java.util.List;
import java.util.Scanner;

public class CustomerMenu {
    public static void customerMenu(Scanner scanner) {
        CustomerController controller = new CustomerController();

        while (true) {
            System.out.println("\n=== Customer menu ===");
            System.out.println("1. Add Customer");
            System.out.println("2. Update Customer");
            System.out.println("3. Delete Customer");
            System.out.println("4. View Customers");
            System.out.println("5. View Customer by ID");
            System.out.println("0. Back");

            int choice = MenuUtils.readIntRequired(scanner, "Choose an option: ");

            try {
                if (choice == 1) {
                    Customer c = buildCustomerFormInput(scanner, true);
                    boolean ok = controller.insertCustomer(c);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    Customer c = buildCustomerFormInput(scanner, true);
                    boolean ok = controller.updateCustomer(c);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    int id = MenuUtils.readIntRequired(scanner, "Customer ID to delete: ");
                    boolean ok = controller.deleteCustomer(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Customer> list = controller.getAllCustomers();
                    printCustomerTableHeader();
                    if (list != null) for (Customer c : list) printCustomerRow(c);
                    printCustomerTableFooter();
                } else if (choice == 5) {
                    int id = MenuUtils.readIntRequired(scanner, "Customer ID to view: ");
                    Customer c = controller.getCustomerById(id);
                    printCustomerTableHeader();
                    if (c != null) printCustomerRow(c);
                    else System.out.println("| \tNot found\t\t\t\t\t\t\t\t|");
                    printCustomerTableFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Customer buildCustomerFormInput(Scanner scanner, boolean promptId) {
        String id = "";
        if (promptId) {
            System.out.print("Customer ID: ");
            id = scanner.nextLine().trim();
        }

        System.out.print("First name: ");
        String fname = scanner.nextLine().trim();

        System.out.print("Last name: ");
        String lname = scanner.nextLine().trim();

        System.out.print("Email: ");
        String email = scanner.nextLine().trim();

        System.out.print("Password: ");
        String password = scanner.nextLine().trim();

        System.out.print("Street: ");
        String street = scanner.nextLine().trim();

        System.out.print("City: ");
        String city = scanner.nextLine().trim();

        System.out.print("State: ");
        String state = scanner.nextLine().trim();

        System.out.print("Zipcode: ");
        String zipcode = scanner.nextLine().trim();

        return new Customer(id, fname, lname, email, password, street, city, state, zipcode);
    }

    /* lowercase alias kept for compatibility */
    private static Customer buildCustomerformInput(Scanner scanner, boolean promptId) {
        return buildCustomerFormInput(scanner, promptId);
    }

    private static void printCustomerTableHeader() {
        System.out.println("+------------+----------------+----------------+----------------------+------------------------+----------------+-------+---------+");
        System.out.println("| CustomerID | First name     | Last name      | Email                | Street                 | City           | State | Zipcode |");
        System.out.println("+------------+----------------+----------------+----------------------+------------------------+----------------+-------+---------+");
    }

    private static void printCustomerTableFooter() {
        System.out.println("+------------+----------------+----------------+----------------------+------------------------+----------------+-------+---------+");
    }

    private static void printCustomerRow(Customer c) {
        String id = MenuUtils.safeGetValue(c, "getCustomer_id", "getCustomerId", "getId", "id");
        String fname = MenuUtils.safeGetValue(c, "getCustomer_fname", "getCustomerFname", "getFname", "fname");
        String lname = MenuUtils.safeGetValue(c, "getCustomer_lname", "getCustomerLname", "getLname", "lname");
        String email = MenuUtils.safeGetValue(c, "getCustomer_email", "getCustomerEmail", "getEmail", "email");
        String street = MenuUtils.safeGetValue(c, "getCustomer_street", "getStreet", "street");
        String city = MenuUtils.safeGetValue(c, "getCustomer_city", "getCity", "city");
        String state = MenuUtils.safeGetValue(c, "getCustomer_state", "getState", "state");
        String zipcode = MenuUtils.safeGetValue(c, "getCustomer_zipcode", "getZipcode", "zipcode");

        if (id == null) id = "";
        if (fname == null) fname = "";
        if (lname == null) lname = "";
        if (email == null) email = "";
        if (street == null) street = "";
        if (city == null) city = "";
        if (state == null) state = "";
        if (zipcode == null) zipcode = "";

        System.out.format("| %-10s | %-14s | %-14s | %-20s | %-22s | %-14s | %-5s | %-7s |%n",
                id,
                MenuUtils.truncate(fname, 14),
                MenuUtils.truncate(lname, 14),
                MenuUtils.truncate(email, 20),
                MenuUtils.truncate(street, 22),
                MenuUtils.truncate(city, 14),
                MenuUtils.truncate(state, 5),
                MenuUtils.truncate(zipcode, 7));
    }
}