// java
package menu;

import controller.DepartmentController;
import model.Department;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Scanner;

public class DepartmentMenu {
    public static void departmentMenu(Scanner scanner) {
        DepartmentController controller = new DepartmentController();

        while (true) {
            System.out.println("\n=== Department menu ===");
            System.out.println("1. Add Department");
            System.out.println("2. Update Department");
            System.out.println("3. Delete Department");
            System.out.println("4. View Departments");
            System.out.println("5. View Department by ID");
            System.out.println("0. Back");
            System.out.print("Choose an option: ");

            String line = scanner.nextLine().trim();
            int choice;
            try {
                choice = Integer.parseInt(line);
            } catch (Exception e) {
                System.out.println("Invalid input.");
                continue;
            }

            try {
                if (choice == 1) {
                    Integer id = readIntOptional(scanner, "Department ID (leave blank if none): ");
                    System.out.print("Department Name: ");
                    String name = scanner.nextLine();
                    Department dept = buildDepartment(id, name);
                    if (dept != null && controller.insertDepartment(dept)) {
                        System.out.println("Added successfully.");
                    } else {
                        System.out.println("Add failed.");
                    }
                } else if (choice == 2) {
                    int id = readIntRequired(scanner, "Department ID to update: ");
                    System.out.print("New Department Name: ");
                    String name = scanner.nextLine();
                    Department dept = buildDepartment(id, name);
                    if (dept != null && controller.updateDepartment(dept)) {
                        System.out.println("Updated successfully.");
                    } else {
                        System.out.println("Update failed.");
                    }
                } else if (choice == 3) {
                    int id = readIntRequired(scanner, "Department ID to delete: ");
                    boolean ok = controller.deleteDepartment(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Department> list = controller.getAllDepartments();
                    printHeader();
                    if (list != null) {
                        for (Department d : list) printRow(d);
                    }
                    printFooter();
                } else if (choice == 5) {
                    int id = readIntRequired(scanner, "Department ID to view: ");
                    Department d = controller.getDepartmentById(id);
                    printHeader();
                    if (d != null) printRow(d);
                    else System.out.println("| \tNot found\t\t\t|");
                    printFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (NumberFormatException nfe) {
                System.out.println("Invalid number format.");
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Integer readIntOptional(Scanner scanner, String prompt) {
        System.out.print(prompt);
        String s = scanner.nextLine().trim();
        if (s.isEmpty()) return null;
        return Integer.parseInt(s);
    }

    private static int readIntRequired(Scanner scanner, String prompt) {
        System.out.print(prompt);
        String s = scanner.nextLine().trim();
        return Integer.parseInt(s);
    }

    private static Department buildDepartment(Integer id, String name) {
        try {
            // Try constructors first
            for (Constructor<?> ctor : Department.class.getDeclaredConstructors()) {
                Class<?>[] pts = ctor.getParameterTypes();
                Object[] args = new Object[pts.length];
                boolean ok = true;
                for (int i = 0; i < pts.length; i++) {
                    Class<?> p = pts[i];
                    if ((p == int.class || p == Integer.class)) {
                        if (id != null) args[i] = id;
                        else { ok = false; break; }
                    } else if (p == String.class) {
                        args[i] = name;
                    } else {
                        ok = false; break;
                    }
                }
                if (!ok) continue;
                ctor.setAccessible(true);
                @SuppressWarnings("unchecked")
                Department inst = (Department) ctor.newInstance(args);
                return inst;
            }

            // fallback: try no-arg + setters/fields
            Department inst = Department.class.getDeclaredConstructor().newInstance();
            if (id != null) trySet(inst, "setDepartmentId", id);
            trySet(inst, "setDepartmentName", name);
            trySet(inst, "setName", name);
            return inst;
        } catch (Exception e) {
            return null;
        }
    }

    private static void trySet(Object obj, String setterName, Object value) {
        if (obj == null || value == null) return;
        Class<?> cls = obj.getClass();
        // try exact
        try {
            Method m = cls.getMethod(setterName, value.getClass());
            m.invoke(obj, value);
            return;
        } catch (Exception ignored) { }
        // try common types
        try {
            if (value instanceof Integer) {
                Method m = cls.getMethod(setterName, int.class);
                m.invoke(obj, ((Integer) value).intValue());
                return;
            }
            Method m = cls.getMethod(setterName, String.class);
            m.invoke(obj, String.valueOf(value));
            return;
        } catch (Exception ignored) { }
        // try any method name match (case-insensitive)
        for (Method m : cls.getMethods()) {
            if (!m.getName().equalsIgnoreCase(setterName)) continue;
            Class<?>[] ps = m.getParameterTypes();
            if (ps.length != 1) continue;
            try {
                if (ps[0] == String.class) m.invoke(obj, String.valueOf(value));
                else if (ps[0] == int.class || ps[0] == Integer.class) m.invoke(obj, Integer.parseInt(String.valueOf(value)));
                else m.invoke(obj, value);
                return;
            } catch (Exception ignored) { }
        }
        // try direct field set
        String fieldName = setterName;
        if (fieldName.startsWith("set")) {
            fieldName = Character.toLowerCase(fieldName.charAt(3)) + fieldName.substring(4);
        }
        try {
            Field f = cls.getDeclaredField(fieldName);
            f.setAccessible(true);
            f.set(obj, value);
        } catch (Exception ignored) { }
    }

    private static void printHeader() {
        System.out.println("+---------------+-------------------+");
        System.out.println("| Department ID | Department Name   |");
        System.out.println("+---------------+-------------------+");
    }

    private static void printFooter() {
        System.out.println("+---------------+-------------------+");
    }

    private static void printRow(Department d) {
        String id = safeGet(d, "getDepartmentId", "getId", "departmentId", "id");
        String name = safeGet(d, "getDepartmentName", "getName", "departmentName", "name");
        if (id == null) id = "";
        if (name == null) name = "";
        String tn = name.length() > 19 ? name.substring(0, 19) : name;
        System.out.format("| %-13s | %-17s |%n", id, tn);
    }

    private static String safeGet(Object obj, String... candidates) {
        if (obj == null) return "";
        Class<?> cls = obj.getClass();
        for (String c : candidates) {
            try {
                if (c.startsWith("get")) {
                    Method m = cls.getMethod(c);
                    Object v = m.invoke(obj);
                    if (v != null) return String.valueOf(v);
                }
            } catch (Exception ignored) { }
        }
        for (String c : candidates) {
            try {
                Method m = cls.getMethod(c);
                Object v = m.invoke(obj);
                if (v != null) return String.valueOf(v);
            } catch (Exception ignored) { }
        }
        for (String c : candidates) {
            String f = c;
            if (f.startsWith("get")) {
                f = Character.toLowerCase(f.charAt(3)) + f.substring(4);
            }
            try {
                Field fld = cls.getDeclaredField(f);
                fld.setAccessible(true);
                Object v = fld.get(obj);
                if (v != null) return String.valueOf(v);
            } catch (Exception ignored) { }
        }
        return "";
    }
}