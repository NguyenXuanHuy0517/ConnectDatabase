package menu;

import controller.DepartmentController;
import model.Department;

import java.util.List;
import java.util.Scanner;

public class DepartmentMenu {
    public static void departmentMenu(Scanner scanner) {
        DepartmentController controller = new DepartmentController();

        while (true) {
            System.out.println("\n=== Department menu ===");
            System.out.println("1. Add Department");
            System.out.println("2. Update Department");
            System.out.println("3. Delete Department");
            System.out.println("4. View Departments");
            System.out.println("5. View Department by ID");
            System.out.println("0. Back");

            int choice = MenuUtils.readIntRequired(scanner, "Choose an option: ");

            try {
                if (choice == 1) {
                    Department d = buildDepartmentFormInput(scanner, true);
                    boolean ok = controller.insertDepartment(d);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    Department d = buildDepartmentFormInput(scanner, true);
                    boolean ok = controller.updateDepartment(d);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    int id = MenuUtils.readIntRequired(scanner, "Department ID to delete: ");
                    boolean ok = controller.deleteDepartment(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Department> list = controller.getAllDepartments();
                    printDepartmentTableHeader();
                    if (list != null) for (Department d : list) printDepartmentRow(d);
                    printDepartmentTableFooter();
                } else if (choice == 5) {
                    int id = MenuUtils.readIntRequired(scanner, "Department ID to view: ");
                    Department d = controller.getDepartmentById(id);
                    printDepartmentTableHeader();
                    if (d != null) printDepartmentRow(d);
                    else System.out.println("| \tNot found\t\t\t|");
                    printDepartmentTableFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Department buildDepartmentFormInput(Scanner scanner, boolean promptId) {
        String idStr = "";
        if (promptId) {
            System.out.print("Department ID: ");
            idStr = scanner.nextLine().trim();
        }

        System.out.print("Department Name: ");
        String name = scanner.nextLine().trim();

        return new Department(idStr, name);
    }

    private static Department buildDepartmentformInput(Scanner scanner, boolean promptId) {
        return buildDepartmentFormInput(scanner, promptId);
    }

    private static void printDepartmentTableHeader() {
        System.out.println("+------------+------------------------+");
        System.out.println("| DepartmentID | DepartmentName       |");
        System.out.println("+------------+------------------------+");
    }

    private static void printDepartmentTableFooter() {
        System.out.println("+------------+------------------------+");
    }

    private static void printDepartmentRow(Department d) {
        String id = MenuUtils.safeGetValue(d, "getDepartment_id", "getDepartmentId", "getId", "department_id", "id");
        String name = MenuUtils.safeGetValue(d, "getDepartment_name", "getDepartmentName", "getName", "department_name", "name");

        if (id == null) id = "";
        if (name == null) name = "";

        System.out.format("| %-10s | %-22s |%n", id, MenuUtils.truncate(name, 22));
    }
}