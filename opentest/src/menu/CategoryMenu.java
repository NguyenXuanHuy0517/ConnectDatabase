// src/menu/CategoryMenu.java
package menu;

import controller.CategoryController;
import model.Category;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Scanner;

public class CategoryMenu {
    public static void categoryMenu(Scanner scanner) {
        CategoryController categoryController = new CategoryController();

        while (true) {
            System.out.println("\n=== Category menu ===");
            System.out.println("1. Add Category");
            System.out.println("2. Update Category");
            System.out.println("3. Delete Category");
            System.out.println("4. View Categories");
            System.out.println("5. View Category by ID");
            System.out.println("0. Back");
            System.out.print("Choose an option: ");

            int choice;
            try {
                choice = Integer.parseInt(scanner.nextLine().trim());
            } catch (Exception e) {
                System.out.println("Invalid input.");
                continue;
            }

            try {
                if (choice == 1) {
                    System.out.print("Category ID: ");
                    String idStr = scanner.nextLine().trim();
                    System.out.print("Department ID: ");
                    String deptIdStr = scanner.nextLine().trim();
                    System.out.print("Category Name: ");
                    String name = scanner.nextLine();
                    // model.Category constructor expects three Strings
                    Category category = new Category(idStr, deptIdStr, name);
                    boolean ok = categoryController.insertCategory(category);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    System.out.print("Category ID to update: ");
                    String idStr = scanner.nextLine().trim();
                    System.out.print("New Department ID: ");
                    String deptIdStr = scanner.nextLine().trim();
                    System.out.print("New Category Name: ");
                    String name = scanner.nextLine();
                    Category category = new Category(idStr, deptIdStr, name);
                    boolean ok = categoryController.updateCategory(category);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    System.out.print("Category ID to delete: ");
                    int id = Integer.parseInt(scanner.nextLine().trim());
                    boolean ok = categoryController.deleteCategory(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Category> categories = categoryController.getAllCategories();
                    printCategoryTableHeader();
                    if (categories != null) {
                        for (Category c : categories) {
                            printCategoryRow(c);
                        }
                    }
                    printCategoryTableFooter();
                } else if (choice == 5) {
                    System.out.print("Category ID to view: ");
                    int id = Integer.parseInt(scanner.nextLine().trim());
                    Category c = categoryController.getCategoryById(id);
                    printCategoryTableHeader();
                    if (c != null) {
                        printCategoryRow(c);
                    } else {
                        System.out.println("| \tNot found\t\t\t\t\t|");
                    }
                    printCategoryTableFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (NumberFormatException nfe) {
                System.out.println("Invalid number format.");
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static void printCategoryTableHeader() {
        System.out.println("+------------+------------------------+----------------------+");
        System.out.println("| CategoryID | CategoryDepartmentID   | CategoryName         |");
        System.out.println("+------------+------------------------+----------------------+");
    }

    private static void printCategoryTableFooter() {
        System.out.println("+------------+------------------------+----------------------+");
    }

    private static void printCategoryRow(Category c) {
        String idStr = safeGetValue(c,
                "getCategoryId", "getCategory_id", "getId", "getID", "getIdStr",
                "categoryId", "category_id", "id");
        String deptStr = safeGetValue(c,
                "getCategoryDepartmentId", "getCategory_department_id", "getDepartmentId", "getDeptId",
                "categoryDepartmentId", "departmentId", "deptId", "department_id");
        String nameStr = safeGetValue(c,
                "getCategoryName", "getName", "categoryName", "category_name", "name");

        if (nameStr == null) nameStr = "";
        if (idStr == null) idStr = "";
        if (deptStr == null) deptStr = "";

        String truncatedName = nameStr.length() > 20 ? nameStr.substring(0, 20) : nameStr;
        System.out.format("| %-10s | %-22s | %-20s |%n", idStr, deptStr, truncatedName);
    }

    private static String safeGetValue(Category c, String... candidateNames) {
        if (c == null) return "";
        Class<?> cls = c.getClass();

        // Try methods first (no-arg)
        for (String name : candidateNames) {
            try {
                if (name.startsWith("get")) {
                    Method m = cls.getMethod(name);
                    Object val = m.invoke(c);
                    if (val != null) return String.valueOf(val);
                }
            } catch (NoSuchMethodException ignored) {
            } catch (Exception ignored) {
            }
        }

        // Try method names without the 'get' prefix (some models use different naming)
        for (String name : candidateNames) {
            try {
                Method m = cls.getMethod(name);
                Object val = m.invoke(c);
                if (val != null) return String.valueOf(val);
            } catch (NoSuchMethodException ignored) {
            } catch (Exception ignored) {
            }
        }

        // Try direct field access
        for (String name : candidateNames) {
            String fieldName = name;
            if (fieldName.startsWith("get")) {
                // convert getXyz -> xyz or Xyz
                fieldName = fieldName.substring(3);
                // lower-first-char
                fieldName = Character.toLowerCase(fieldName.charAt(0)) + fieldName.substring(1);
            }
            try {
                Field f = cls.getDeclaredField(fieldName);
                f.setAccessible(true);
                Object val = f.get(c);
                if (val != null) return String.valueOf(val);
            } catch (NoSuchFieldException ignored) {
            } catch (Exception ignored) {
            }
        }

        return "";
    }
}