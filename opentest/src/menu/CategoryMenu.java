// java
package menu;

import controller.CategoryController;
import model.Category;

import java.util.List;
import java.util.Scanner;

public class CategoryMenu {
    public static void categoryMenu(Scanner scanner) {
        CategoryController categoryController = new CategoryController();

        while (true) {
            System.out.println("\n=== Category menu ===");
            System.out.println("1. Add Category");
            System.out.println("2. Update Category");
            System.out.println("3. Delete Category");
            System.out.println("4. View Categories");
            System.out.println("5. View Category by ID");
            System.out.println("0. Back");

            int choice = MenuUtils.readIntRequired(scanner, "Choose an option: ");

            try {
                if (choice == 1) {
                    Category c = buildCategoryFormInput(scanner, true);
                    boolean ok = categoryController.insertCategory(c);
                    System.out.println(ok ? "Added successfully." : "Add failed.");
                } else if (choice == 2) {
                    Category c = buildCategoryFormInput(scanner, true);
                    boolean ok = categoryController.updateCategory(c);
                    System.out.println(ok ? "Updated successfully." : "Update failed.");
                } else if (choice == 3) {
                    int id = MenuUtils.readIntRequired(scanner, "Category ID to delete: ");
                    boolean ok = categoryController.deleteCategory(id);
                    System.out.println(ok ? "Deleted successfully." : "Delete failed.");
                } else if (choice == 4) {
                    List<Category> categories = categoryController.getAllCategories();
                    printCategoryTableHeader();
                    if (categories != null) {
                        for (Category c : categories) printCategoryRow(c);
                    }
                    printCategoryTableFooter();
                } else if (choice == 5) {
                    int id = MenuUtils.readIntRequired(scanner, "Category ID to view: ");
                    Category c = categoryController.getCategoryById(id);
                    printCategoryTableHeader();
                    if (c != null) printCategoryRow(c);
                    else System.out.println("| \tNot found\t\t\t\t\t|");
                    printCategoryTableFooter();
                } else if (choice == 0) {
                    break;
                } else {
                    System.out.println("Invalid option.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private static Category buildCategoryFormInput(Scanner scanner, boolean promptId) {
        String idStr = "";
        if (promptId) {
            System.out.print("Category ID: ");
            idStr = scanner.nextLine().trim();
        }

        System.out.print("Department ID: ");
        String dept = scanner.nextLine().trim();

        System.out.print("Category Name: ");
        String name = scanner.nextLine().trim();

        // construct using the available three-argument constructor in model.Category
        return new Category(idStr, dept, name);
    }

    /* lowercase alias kept for compatibility */
    private static Category buildCategoryformInput(Scanner scanner, boolean promptId) {
        return buildCategoryFormInput(scanner, promptId);
    }

    private static void printCategoryTableHeader() {
        System.out.println("+------------+------------------------+----------------------+");
        System.out.println("| CategoryID | CategoryDepartmentID   | CategoryName         |");
        System.out.println("+------------+------------------------+----------------------+");
    }

    private static void printCategoryTableFooter() {
        System.out.println("+------------+------------------------+----------------------+");
    }

    private static void printCategoryRow(Category c) {
        String idStr = MenuUtils.safeGetValue(c,
                "getCategoryId", "getCategory_id", "getId", "getID", "getIdStr",
                "categoryId", "category_id", "id");
        String deptStr = MenuUtils.safeGetValue(c,
                "getCategoryDepartmentId", "getCategory_department_id", "getDepartmentId", "getDeptId",
                "categoryDepartmentId", "departmentId", "deptId", "department_id");
        String nameStr = MenuUtils.safeGetValue(c,
                "getCategoryName", "getName", "categoryName", "category_name", "name");

        if (idStr == null) idStr = "";
        if (deptStr == null) deptStr = "";
        if (nameStr == null) nameStr = "";

        String truncatedName = MenuUtils.truncate(nameStr, 20);
        System.out.format("| %-10s | %-22s | %-20s |%n", idStr, deptStr, truncatedName);
    }
}